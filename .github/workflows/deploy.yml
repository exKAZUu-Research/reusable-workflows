name: Deploy app

on:
  workflow_call:
    inputs:
      ci_size:
        default: medium
        required: false
        type: string
      cpu_arch:
        required: false
        type: string
      deploy_command:
        required: false
        type: string
      dot_env_path:
        default: .env
        required: false
        type: string
      environment:
        required: true
        type: string
      file_path_1:
        required: false
        type: string
      github_hosted_runner:
        required: false
        type: boolean
      ignore_renovate:
        required: false
        type: boolean
      runs_on:
        required: false
        type: string
      server_url:
        required: false
        type: string
      target_organization:
        required: false
        type: string
      version:
        required: false
        type: string
    secrets:
      DISCORD_WEBHOOK_URL:
        required: false
      DOT_ENV:
        required: false
      FILE_CONTENT_1:
        required: false
      FLY_API_TOKEN:
        required: false
      GCP_SA_KEY_JSON:
        required: false
      GCP_SA_KEY_JSON_FOR_FIREBASE:
        required: false
      GH_TOKEN:
        required: false

jobs:
  deploy:
    if: ${{ (!inputs.target_organization || github.repository_owner == inputs.target_organization) && (!inputs.ignore_renovate || (github.event.head_commit.author.username != 'renovate-bot' && github.event.head_commit.author.username != 'renovate[bot]')) }}
    runs-on: ${{ ((!github.event.repository.private || inputs.github_hosted_runner) && 'ubuntu-latest') || (inputs.runs_on && fromJSON(inputs.runs_on)) || (inputs.cpu_arch && fromJSON(format('["self-hosted", "{0}", "{1}"]', inputs.ci_size, inputs.cpu_arch))) || fromJSON(format('["self-hosted", "{0}"]', inputs.ci_size)) }}
    env:
      FORCE_COLOR: 3
      # constants
      GCLOUD_VERSION: 449.0.0
      PYTHON_VERSION: 3.9.17
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/credentials.json
      # arguments
      HAS_DISCORD_WEBHOOK_URL: ${{ !!secrets.DISCORD_WEBHOOK_URL }}
      HAS_DOT_ENV: ${{ !!secrets.DOT_ENV }}
      HAS_FLY_API_TOKEN: ${{ !!secrets.FLY_API_TOKEN }}
      HAS_GCP_SA_KEY_JSON: ${{ !!secrets.GCP_SA_KEY_JSON }}
      HAS_GCP_SA_KEY_JSON_FOR_FIREBASE: ${{ !!secrets.GCP_SA_KEY_JSON_FOR_FIREBASE }}
      WB_ENV: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ env.HAS_DOT_ENV == 'true' }}
        run: echo '${{ secrets.DOT_ENV }}' > ${{ inputs.dot_env_path }}
      - if: ${{ inputs.file_path_1 }}
        run: echo '${{ secrets.FILE_CONTENT_1 }}' > ${{ inputs.file_path_1 }}

      - name: Check version files
        id: check-ver
        run: |
          if [[ -f .tool-versions || -f .node-version || -f .python-version ]]; then
            echo "exist-any-version=1" >> $GITHUB_OUTPUT
          fi
          if [[ -f .node-version || "$(cat .tool-versions)" == *'nodejs'* ]]; then
            echo "exist-nodejs-version=1" >> $GITHUB_OUTPUT
          fi
      - name: Check gcloud is required
        id: check-gcloud
        run: |
          if [[ $HAS_GCP_SA_KEY_JSON == "true" ]]; then
            if [[ "$(cat package.json)" == *gcloud* || "$(cat packages/*/package.json)" == *gcloud* ]]; then
              echo "require-gcloud=1" >> $GITHUB_OUTPUT
            fi
          fi
      - if: ${{ !steps.check-ver.outputs.exist-nodejs-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version || 20 }}
      - if: ${{ steps.check-ver.outputs.exist-any-version || steps.check-gcloud.outputs.require-gcloud }}
        uses: willbooster/asdf-actions/install@main
      - if: ${{ steps.check-gcloud.outputs.require-gcloud }}
        name: Install gcloud with asdf
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            if [[ ! -f .tool-versions ]] || [[ "$(cat .tool-versions)" != *"python"* ]]; then
              asdf plugin add python || true
              asdf local python $PYTHON_VERSION || true
              # Deal with incomplete python installation
              python --version || asdf uninstall python $PYTHON_VERSION
              asdf install python $PYTHON_VERSION
              asdf local python $PYTHON_VERSION
            fi
            if [[ ! -f .tool-versions ]] || [[ "$(cat .tool-versions)" != *"gcloud"* ]]; then
              asdf plugin add gcloud || true
              asdf install gcloud $GCLOUD_VERSION
              asdf local gcloud $GCLOUD_VERSION
            fi
      - name: Show environment information
        id: env-info
        # https://stackoverflow.com/a/677212
        run: |
          echo "WB_ENV: $WB_ENV"
          echo "node: $(node -v)"
          echo "npm: $(npm -v)"
          YARN=$(yarn -v); echo "yarn: $YARN"
          if [[ "$YARN" == "1."* ]]; then
            echo "yarn-dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
          fi

          if PYTHON=$(python --version 2> /dev/null); then echo "python: $PYTHON"; fi
          if POETRY=$(poetry --version 2> /dev/null); then
            echo "poetry: $POETRY"
            poetry config virtualenvs.in-project true
            poetry config virtualenvs.prefer-active-python true
          fi

          if gcloud -v &> /dev/null; then echo "gcloud: $(gcloud -v 2>&1 | head -n 1)"; fi

      - name: Set environment variables
        run: |
          echo "PATH=$HOME/.fly/bin:$PATH" >> $GITHUB_ENV
          WB_VERSION=$(git describe --always --tags)
          echo "WB_VERSION=$WB_VERSION" >> $GITHUB_ENV
          echo "VERSION=$WB_VERSION" >> $GITHUB_ENV
      - name: Verify environment variables
        run: |
          echo ${PATH}
          echo ${WB_VERSION}
          echo ${VERSION}

      - if: ${{ steps.env-info.outputs.yarn-dir }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.env-info.outputs.yarn-dir }}
          # Don't use **/yarn.lock because it scans yarn.lock in node_modules
          # c.f. https://github.com/AllanChain/blog/issues/98
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-

      - if: ${{ env.HAS_FLY_API_TOKEN == 'true' }}
        name: Install fly
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          command: curl -L https://fly.io/install.sh | FLYCTL_INSTALL=$HOME/.fly sh
      - if: ${{ steps.check-gcloud.outputs.require-gcloud && env.HAS_GCP_SA_KEY_JSON == 'true' }}
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}
      - if: ${{ steps.check-gcloud.outputs.require-gcloud }}
        name: Configure docker to use gcloud
        run: gcloud auth configure-docker asia-northeast1-docker.pkg.dev --quiet
      - run: yarn install || true # To ignore postinstall errors

      - if: ${{ env.HAS_GCP_SA_KEY_JSON_FOR_FIREBASE == 'true' }}
        name: Create credential file for Firebase
        run: echo '${{ secrets.GCP_SA_KEY_JSON_FOR_FIREBASE }}' > $GOOGLE_APPLICATION_CREDENTIALS

      - run: if [[ "$(cat package.json)" == *'"common/ci-setup":'* ]]; then yarn run common/ci-setup; fi

      - name: Deploy
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 60
          max_attempts: ${{ (env.HAS_FLY_API_TOKEN == 'true' || env.HAS_GCP_SA_KEY_JSON == 'true') && 20 || 1 }}
          command: |
            # GCP_SA_KEY_JSON may be used in deploy/ci-setup
            if [[ "$(cat package.json)" == *'"deploy/ci-setup":'* ]]; then yarn run deploy/ci-setup; fi
            yarn run ${{ inputs.deploy_command || 'deploy' }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          GCP_SA_KEY_JSON: ${{ secrets.GCP_SA_KEY_JSON }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - if: ${{ env.HAS_DISCORD_WEBHOOK_URL == 'true' && inputs.environment != 'production' }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
               --data "{
                  \"username\": \"WillBooster Bot\",
                  \"avatar_url\": \"https://avatars.githubusercontent.com/u/98675783\",
                  \"content\": \"[${{ github.event.repository.name }}](${{ github.event.repository.html_url }}) の${{inputs.environment}}環境 (${{ inputs.server_url }}) を [$(git describe --always --tags)](https://github.com/${{ github.repository }}/commits/$(git describe --always --tags)) に更新しました。\"
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
      - if: ${{ env.HAS_DISCORD_WEBHOOK_URL == 'true' && inputs.environment == 'production' }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
               --data "{
                  \"username\": \"WillBooster Bot\",
                  \"avatar_url\": \"https://avatars.githubusercontent.com/u/98675783\",
                  \"content\": \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n[${{ github.event.repository.name }}](${{ github.event.repository.html_url }}) の本番環境 (${{ inputs.server_url }}) を [$(git describe --always --tags)](https://github.com/${{ github.repository }}/commits/$(git describe --always --tags)) に更新しました。\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - if: ${{ always() }}
        name: Delete credential files
        run: rm -f $GOOGLE_APPLICATION_CREDENTIALS ${{ inputs.dot_env_path }}
      - if: ${{ always() }}
        name: Clean up docker
        run: |
          true $(docker rm -f $(docker ps -q) 2> /dev/null)
          true $(docker system prune -a -f --filter "until=2h")
          if [[ ! $(docker ps) ]]; then
            (sleep 5; sudo reboot) &
          fi
